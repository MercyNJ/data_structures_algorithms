#!/usr/bin/env python3
"""
Module contains implementation for:
389. Find the Difference
You are given two strings s and t.

String t is generated by random shuffling string s and then add one more letter at a random position.

Return the letter that was added to t.
Example 1:

Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.

Example 2:

Input: s = "", t = "y"
Output: "y"
"""

class Solution:
    def findTheDifference(self, s: str, t: str) -> str:
        dict_s = {}
        for char in s:
            dict_s[char] = dict_s.get(char, 0) + 1

        dict_t = {}
        for char in t:
            dict_t[char] = dict_t.get(char, 0) + 1

        for char in dict_t:
            if char not in dict_s or dict_t[char] > dict_s[char]:
                return char

def test_findTheDifference():
    solution = Solution()

    s1 = "abcd"
    t1 = "abcde"
    assert solution.findTheDifference(s1, t1) == "e"

    s2 = ""
    t2 = "y"
    assert solution.findTheDifference(s2, t2) == "y"

    s3 = "a"
    t3 = "aa"
    assert solution.findTheDifference(s3, t3) == "a"

    print("All test cases passed!")

test_findTheDifference()

# Different Approach
from collections import Counter

class Solution:
    def findTheDifference(self, s: str, t: str) -> str:
        count_s = Counter(s)
        count_t = Counter(t)
        for char, count in count_t.items():
            if count > count_s[char]:
                return char
